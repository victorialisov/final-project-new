{"name": "test_user_can_sign_in", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"e00532ce1747a34556f7a384d6bfe4aa\")>\n\n    @allure.story(\"Check new user can sign up\")\n    def test_user_can_sign_in(browser):\n        user_email = TempUserEmail()\n        with allure.step('Open sign up page'):\n            main_page = MainPage(browser)\n            main_page.open_main_page()\n            main_page.open_sign_in_page()\n        with allure.step('Check sign up page displays'):\n            sign_up_start_page = SignUpStartPage(browser)\n            sign_up_start_page.should_be_sign_up_start_page()\n        with allure.step('Sign up with newly created email box'):\n            user_first_name = random_word_generator()\n            user_second_name = random_word_generator()\n            user_full_name = user_first_name + \" \" + user_second_name\n            email_box = user_email.create_email_box()\n            print(\"!!!!!\" + email_box['email'])\n            sign_up_start_page.start_sign_up(user_full_name, email_box['email'])\n        with allure.step('Check sign up continue page displays'):\n            sign_up_continue_page = SignUpContinuePage(browser)\n            sign_up_continue_page.should_be_sign_up_continue_page()\n        with allure.step('Continue sign up passed'):\n            sign_up_continue_page.continue_sign_up()\n        with allure.step('Check sign up final page displays'):\n            sign_up_final_page = SignUpFinalPage(browser)\n            sign_up_final_page.should_be_sign_up_final_page()\n        with allure.step('Final sign up passed'):\n            sign_up_final_page.final_sign_up()\n        with allure.step('Pass by registration link from user email'):\n            print(\"!!!!!\" + email_box['key'])\n            email_box_key = email_box['key']\n            # sleep is needed for registration mail will be sent to user_email\n            time.sleep(10)\n            mail_list = user_email.get_mails_list(email_box_key)\n            print(\"!!!!! mail_list: \" + json.dumps(mail_list))\n            sign_up_email_msg = user_email.get_mail_msg(mail_list[0]['id'], email_box_key)\n            print(\"!!!!! email_msg: \" + sign_up_email_msg)\n            passwd_reset_link = get_link(sign_up_email_msg)\n            sign_up_final_page.navigate_to_passwd_reset_page(passwd_reset_link)\n        with allure.step('Check password reset page displays'):\n            passwd_reset_page = PasswordReset(browser)\n            passwd_reset_page.should_be_password_reset_page()\n        with allure.step('Reset password with random value'):\n            user_passwd = random_word_generator()\n            print(\"!!!!! passwd: \" + user_passwd)\n            passwd_reset_page.password_reset(user_passwd)\n            passwd_reset_page.navigate_to_profile_page()\n        with allure.step('Check user profile page displays'):\n            user_profile_page = UserProfile(browser)\n>           user_profile_page.should_be_user_profile_page(user_full_name)\n\ntests\\test_sign_up.py:64: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.profile_page.UserProfile object at 0x03D03910>, full_name = 'xqzpyyen dylwoftj'\n\n    def should_be_user_profile_page(self, full_name: str):\n        submit_btn = self.find_element(UserProfileLocators.LOCATOR_SUBMIT_BTN)\n        submit_btn.click()\n    \n        user_name_lbl = self.find_element(UserProfileLocators.LOCATOR_SUBMIT_BTN)\n>       assert full_name in user_name_lbl.get_attribute(\"innerText\")\nE       AssertionError\n\npages\\profile_page.py:12: AssertionError"}, "steps": [{"name": "Open sign up page", "status": "passed", "start": 1633270505105, "stop": 1633270508865}, {"name": "Check sign up page displays", "status": "passed", "start": 1633270508865, "stop": 1633270508887}, {"name": "Sign up with newly created email box", "status": "passed", "start": 1633270508888, "stop": 1633270510529}, {"name": "Check sign up continue page displays", "status": "passed", "start": 1633270510529, "stop": 1633270510562}, {"name": "Continue sign up passed", "status": "passed", "start": 1633270510562, "stop": 1633270510646}, {"name": "Check sign up final page displays", "status": "passed", "start": 1633270510646, "stop": 1633270511182}, {"name": "Final sign up passed", "status": "passed", "start": 1633270511182, "stop": 1633270511236}, {"name": "Pass by registration link from user email", "status": "passed", "start": 1633270511236, "stop": 1633270523171}, {"name": "Check password reset page displays", "status": "passed", "start": 1633270523171, "stop": 1633270523203}, {"name": "Reset password with random value", "status": "passed", "start": 1633270523203, "stop": 1633270525155}, {"name": "Check user profile page displays", "status": "failed", "statusDetails": {"message": "AssertionError\n", "trace": "  File \"C:\\Users\\viktorial\\Documents\\python-project\\final-project-new\\tests\\test_sign_up.py\", line 64, in test_user_can_sign_in\n    user_profile_page.should_be_user_profile_page(user_full_name)\n  File \"C:\\Users\\viktorial\\Documents\\python-project\\final-project-new\\pages\\profile_page.py\", line 12, in should_be_user_profile_page\n    assert full_name in user_name_lbl.get_attribute(\"innerText\")\n"}, "start": 1633270525155, "stop": 1633270526172}], "attachments": [{"name": "stdout", "source": "7966ca95-e87f-4f01-80b1-625261284b40-attachment.txt", "type": "text/plain"}], "start": 1633270505105, "stop": 1633270526177, "uuid": "627bbad8-12ef-4027-ade3-a64d92cf27f5", "historyId": "fdc5f7362b5ca9de9192ce5f6efd4eb0", "testCaseId": "932dc57a0d23d7b3c463606e6e97eb1d", "fullName": "tests.test_sign_up#test_user_can_sign_in", "labels": [{"name": "story", "value": "Check new user can sign up"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_sign_up"}, {"name": "host", "value": "viktorial"}, {"name": "thread", "value": "21388-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_sign_up"}]}